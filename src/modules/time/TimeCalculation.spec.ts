import {describe, expect, test} from "vitest";
import {
    getGameDurationFromGameTimerEvents,
    getFieldDurationFromPlayerTimerEvents,
    getGoalingDurationFromPlayerTimerEvents
} from "@/modules/time/TimeCalculation";
import {EventEnum, GameEvent} from "@/stores/models/GameEvent";
import {addSeconds} from "date-fns";
import {clone} from "lodash";

describe('getDurationsFromTimerEvents', () => {
    test('start only (missing end) returns diff between start and now provided in 2nd parameter', () => {
        const now = new Date()
        const startAt = clone(now)
        const startEvent = new GameEvent(EventEnum.GAME_TIMER_START, now, null, null)
        expect(getGameDurationFromGameTimerEvents([startEvent], startAt)).toBe(0)
    })
    test('start + end returns diff between start + end', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const startEvent = new GameEvent(EventEnum.GAME_TIMER_START, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, stopAt, null, null)
        expect(getGameDurationFromGameTimerEvents([startEvent, endEvent], now)).toBe(17)
    })
    test('start + end + start + end returns diff between spans omitting space between stop and start', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.GAME_TIMER_START, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.GAME_TIMER_START, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, reStopAt, null, null)
        expect(getGameDurationFromGameTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be sorted and calculated properly', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.GAME_TIMER_START, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.GAME_TIMER_START, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, reStopAt, null, null)
        expect(getGameDurationFromGameTimerEvents([endEvent, restartEvent, startEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be presented in START/STOP order and thus will yield a different result', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.GAME_TIMER_START, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.GAME_TIMER_START, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, reStopAt, null, null)
        expect(getGameDurationFromGameTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(16)
    })
    test('If timer never starts, it will return a 0', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const endEvent = new GameEvent(EventEnum.GAME_TIMER_STOP, stopAt, null, null)
        expect(getGameDurationFromGameTimerEvents([endEvent], now)).toBe(0)
    })
})

describe('getFieldDurationFromPlayerTimerEvents', () => {
    test('field only (missing end) returns diff between field and now provided in 2nd parameter', () => {
        const now = new Date()
        const startAt = clone(now)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, now, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([startEvent], startAt)).toBe(0)
    })
    test('start + end returns diff between start + end', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([startEvent, endEvent], now)).toBe(17)
    })
    test('start + end + start + end returns diff between spans omitting space between stop and start', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be sorted and calculated properly', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([endEvent, restartEvent, startEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be presented in START/STOP order and thus will yield a different result', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(16)
    })
    test('If timer never starts, it will return a 0', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([endEvent], now)).toBe(0)
    })
})

describe('getGoalingDurationFromPlayerTimerEvents', () => {
    test('start only (missing end) returns diff between start and now provided in 2nd parameter', () => {
        const now = new Date()
        const startAt = clone(now)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, now, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([startEvent], startAt)).toBe(0)
    })
    test('start + end returns diff between start + end', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([startEvent, endEvent], now)).toBe(17)
    })
    test('start + end + start + end returns diff between spans omitting space between stop and start', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be sorted and calculated properly', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([endEvent, restartEvent, startEvent, reStopEvent], now)).toBe(29)
    })
    test('Items should be presented in START/STOP order and thus will yield a different result', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent], now)).toBe(16)
    })
    test('If timer never starts, it will return a 0', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([endEvent], now)).toBe(0)
    })
})

describe('Mixed events for goaling and field calculations', () => {
    test('Mixed goal/field should be properly taken into account to calculate field time', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const restartAt2 = addSeconds(reStopAt, 8)
        const reStopAt2 = addSeconds(restartAt2, 21)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        const restartEvent2 = new GameEvent(EventEnum.PLAYER_TO_FIELD, restartAt2, null, null)
        const reStopEvent2 = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt2, null, null)
        expect(getFieldDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent, restartEvent2, reStopEvent2], now)).toBe(38)
    })
    test('Mixed goal/field should be properly taken into account to calculate goal time', () => {
        const now = new Date()
        const startAt = clone(now)
        const stopAt = addSeconds(startAt, 17)
        const restartAt = addSeconds(stopAt, 4)
        const reStopAt = addSeconds(restartAt, 12)
        const restartAt2 = addSeconds(reStopAt, 8)
        const reStopAt2 = addSeconds(restartAt2, 21)
        const startEvent = new GameEvent(EventEnum.PLAYER_TO_GOAL, startAt, null, null)
        const endEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, stopAt, null, null)
        const restartEvent = new GameEvent(EventEnum.PLAYER_TO_FIELD, restartAt, null, null)
        const reStopEvent = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt, null, null)
        const restartEvent2 = new GameEvent(EventEnum.PLAYER_TO_GOAL, restartAt2, null, null)
        const reStopEvent2 = new GameEvent(EventEnum.PLAYER_TO_BENCH, reStopAt2, null, null)
        expect(getGoalingDurationFromPlayerTimerEvents([startEvent, endEvent, restartEvent, reStopEvent, restartEvent2, reStopEvent2], now)).toBe(38)
    })
})